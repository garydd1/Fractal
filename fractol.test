/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   fractol.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dgarizad <dgarizad@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/04/07 19:19:07 by dgarizad          #+#    #+#             */
/*   Updated: 2023/04/09 16:21:53 by dgarizad         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "./inc/so_long.h"

void draw_circle(float center_x, float center_y, float radius, mlx_image_t *img, uint32_t color) 
{
    int x = 0, y = radius;
    int d = 3 - 2 * radius;
    while (x <= y) {
        mlx_put_pixel(img, center_x + x, center_y + y, color);
        mlx_put_pixel(img, center_x + y, center_y + x, color);
        mlx_put_pixel(img, center_x - x, center_y + y, color);
        mlx_put_pixel(img, center_x - y, center_y + x, color);
        mlx_put_pixel(img, center_x + x, center_y - y, color);
        mlx_put_pixel(img, center_x + y, center_y - x, color);
        mlx_put_pixel(img, center_x - x, center_y - y, color);
        mlx_put_pixel(img, center_x - y, center_y - x, color);
        x++;
        if (d < 0) {
            d = d + 4 * x + 6;
        } else {
            d = d + 4 * (x - y) + 10;
            y--;
        }
    }
}
static void ft_hook(void* param)
{
	//const mlx_t* mlx = param;
	
	
	
		draw_circle(10, 10, 10, (mlx_image_t *) param, 0xBF00FFFF );
		draw_circle(100, 100, 10, (mlx_image_t *) param, 0xAACF00FF );
	
	//printf("WIDTH: %d | HEIGHT: %d\n", mlx->width, mlx->height);
}


// int	main (void)
// {
// 	mlx_t *mlx;
// 	mlx_image_t *img;

// 	mlx_set_setting(MLX_MAXIMIZED, false);
// 	mlx = mlx_init(WIDTH, HEIGHT, "Victir", true);
// 	img = mlx_new_image(mlx, 200, 200);
	
	
// 	mlx_put_pixel(img, 10, 10, 0xAF000ABC);
// 	mlx_image_to_window(mlx, img, 0, 0);
// 	mlx_loop_hook(mlx, ft_hook, mlx);
//  	mlx_loop(mlx);
// 	return (0);
// }
// // MAIN FOR SHITTY TESTINGS: 
int	main(void)
{
	// void *mlx_ptr;
	// void *win_ptr;
	
	// mlx_ptr = mlx_init();
	// win_ptr = mlx_new_window(mlx_ptr, 500, 500, "VICTIR");
	// mlx_loop(mlx_ptr);
	//MLX42
	mlx_t* mlx;
	mlx_image_t* img;
	mlx_set_setting(MLX_MAXIMIZED, false);
	mlx = mlx_init(WIDTH, HEIGHT, "Victir", true);
	img = mlx_new_image(mlx, 2000, 1000);
	
	
	mlx_put_pixel(img, 10, 10, 0xAF000ABC);
	mlx_image_to_window(mlx, img, 0, 0);
	mlx_put_pixel(img, 20, 20, 0xBF00FFFF);
	mlx_image_to_window(mlx, img, 0, 0);
	int i = 10;
	while (i < 100)
	{
		mlx_put_pixel(img, i, 10, 0xAC3D0ABC);
		mlx_put_pixel(img, 10, i++, 0xBF00FFFF);
	}
	i = 10;
	while (i++ < 100)
	{	
		mlx_put_pixel(img, i, i+89, 0xAC3D0ABC);
	}
	int j = i;
	while (j < 190)
	{
		mlx_put_pixel(img, j, 10, 0xAC3D0ABC);
		mlx_put_pixel(img, 100, j++, 0xBF00FFFF);
	}
	i = 10;
	while (i++ < 100)
	{	
		mlx_put_pixel(img, i, i, 0xAC3D0ABC);
	}
	i = 100;
	j = 100;
	while (i++ < 190)
	{	
		mlx_put_pixel(img, i, j, 0xAC3D0ABC);
		j--;
	}
	while (j < 100)
	{
		mlx_put_pixel(img, i-1, j++, 0xBF00FFFF);
	}
	while (i > 100)
	{
		mlx_put_pixel(img, i-1, j-1, 0xFFFF00FF);
		i--;
		j++;
	}
	i = 10;
	j = 100;
	while (i < 189)
	{
		mlx_put_pixel(img, i++, j-1, 0x00FFFFFF);
	} 
	mlx_put_pixel(img, 200, 200, 0x00FFFFFF);
	mlx_put_pixel(img, 400, 400, 0x00FFFFFF);
	mlx_put_pixel(img, 200, 400, 0x00FFFFFF);
	mlx_put_pixel(img, 400, 200, 0x00FFFFFF);
	mlx_put_pixel(img, 300, 300, 0x00FFFFFF);
	draw_circle(200.0, 200.0, 50.0, img, 0x00FFFFFF);
	draw_circle(300.0, 300.0, 50.0, img, 0x00FFFFFF);
	draw_circle(400.0, 400.0, 50.0, img, 0x00FFFFFF);
	i = 200;
	j = 200;
	float magic = 50; 
	while (i <= 600)
	{
		draw_circle(i, j, magic, img, 0x00FFFFFF);
		mlx_put_pixel(img, i, j, 0xFFFF00FF);
		magic -= 0.5;
		if (magic == 0)
			magic = 50;
		i++;
		j++;
	}
	// i = 400;
	// j = 200; 
	// while (i <= 800)
	// {	
	// 	mlx_put_pixel(img, i, 200 + (double)40 * sin((((double) i)*180/3.1416)), 0xFFAA11FF);
	// 	i++;
	// }
	i = 400;
	magic = 10;
	int flag = 0;
	while (i <= 800)
	{	
		double y = 200 + 50 * sin((6*(double) i) * M_PI / 180.0);
		mlx_put_pixel(img, i, y, 0xFFFFFFFF);
		draw_circle(i, y, magic, img, 0xFFAA11FF);
		if (magic == 0 || flag == 1)
		{
			flag = 1;
			magic += 0.5;
		}
		if (magic == 50 || flag == 0)
		{
			flag = 0;
			magic -= 0.5;
		}
		i++;
	}
	i = 800;
	magic = 10;
	float magic2 = 7;
	while (i <= 1200)
	{	
		double y = 200 + (double)50*sqrt(magic2) * sin((2.5*(double) i) * M_PI / 180.0);
		mlx_put_pixel(img, i, y, 0xFFFFFFFF);
		draw_circle(i, y, magic, img, 0x01AA11FF);
		i++;
	}
	// Register a hook and pass mlx as an optional param.
	// NOTE: Do this before calling mlx_loop!
	mlx_loop_hook(mlx, ft_hook, img);
	mlx_loop(mlx);
	mlx_terminate(mlx);
	//END MLX42
	return (0);
	
}
